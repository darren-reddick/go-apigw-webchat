package main

import (
	"flag"
	"fmt"
	"log"
	"net/url"
	"os"
	"os/signal"
	"regexp"
	"time"

	"github.com/gorilla/websocket"
)

var addr = flag.String("addr", "localhost:8080", "http service address")

func main() {
	flag.Parse()
	log.SetFlags(0)

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	// wss://1tnps8l6ag.execute-api.eu-west-1.amazonaws.com/poc
	u := url.URL{Scheme: "wss", Host: "1tnps8l6ag.execute-api.eu-west-1.amazonaws.com", Path: "/poc"}
	log.Printf("connecting to %s", u.String())

	c, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		log.Fatal("dial:", err)
	}
	defer c.Close()

	done := make(chan struct{})
	rcv := make(chan string, 10)

	go func() {
		defer close(done)
		for {
			_, message, err := c.ReadMessage()
			if err != nil {
				log.Println("read:", err)
				return
			}
			log.Printf("recv: %s", message)
			rcv <- string(message)

		}
	}()

	complete := false

	for !complete {
		select {
		case <-time.After(time.Second * 30):
			fmt.Println("Time done")
			complete = true
		case s := <-rcv:
			if m, _ := regexp.MatchString(`^Welcome! - connected on.*`, s); m {
				fmt.Println("Welcome message received")
				complete = true
			}
			fmt.Printf("received %s", s)

		}
	}

	err = c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))

	select {
	case <-done:
	case <-time.After(time.Second):
	}

}
